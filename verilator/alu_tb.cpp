#include "Valu.h"        // Generated by Verilator

#include "verilated_vcd_c.h"
#include "verilated.h"
#include <assert.h>

static uint64_t ticks = 0;
VerilatedVcdC* tfp = new VerilatedVcdC;

void tick(Valu* alu)
{
    assert(alu != NULL);

    alu->clock = 0;
	alu->eval();
    if (tfp) tfp->dump(ticks++);

    alu->clock = 1;
	alu->eval();
    if (tfp) tfp->dump(ticks++);
}


int multiply(Valu* alu, int x, int y)
{
	alu->in1 = x;
	alu->in2 = y;
	alu->operation = 7;
	alu->trigger_sync = 1;

	printf("Multiplying %d by %d\n", x, y);

	do {
		tick(alu);
		printf("Ticks: %d. busy: %d, result_ready: %d\n", ticks, alu->busy, alu->result_ready);
		alu->trigger_sync = 0;
	} while (!alu->result_ready);
	
	printf("Result: %d\n", alu->out_sync);
	return alu->out_sync;
}

#define CHECK_PRODUCT(x, y) assert(multiply(alu, x, y) == x * y)

int main(int argc, char **argv) 
{
    Verilated::commandArgs(argc, argv);
    Valu* alu = new Valu;
    
    Verilated::traceEverOn(true);
	alu->trace(tfp, 99);
	tfp->open("wave.vcd");

	CHECK_PRODUCT(5, 5);
	CHECK_PRODUCT(-5, 5);
	CHECK_PRODUCT(1, 0);
	CHECK_PRODUCT(1, 1);
	CHECK_PRODUCT(69, 420);
	CHECK_PRODUCT(135135, 3);
    
    tfp->close();

    delete alu;
    return 0;
}
